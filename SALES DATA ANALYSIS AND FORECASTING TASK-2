import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
df = pd.read_csv('Sales Data.csv')
# Remove any empty rows
df = df.dropna(how='all')
df['Order Date'] = pd.to_datetime(df['Order Date'])
df['Day'] = df['Order Date'].dt.day
df['Day of Week'] = df['Order Date'].dt.day_name()
df['Day of Week Num'] = df['Order Date'].dt.dayofweek
df['Weekend'] = df['Day of Week Num'].apply(lambda x: 1 if x >= 5 else 0)
monthly_sales = df.groupby('Month')['Sales'].sum().reset_index()
plt.figure(figsize=(10, 6))
sns.barplot(x='Month', y='Sales', data=monthly_sales)
plt.title('Monthly Sales')
plt.ylabel('Total Sales ($)')
plt.show()
city_sales = df.groupby('City')['Sales'].sum().sort_values(ascending=False).reset_index()
plt.figure(figsize=(12, 6))
sns.barplot(x='City', y='Sales', data=city_sales)
plt.title('Sales by City')
plt.xticks(rotation=45)
plt.ylabel('Total Sales ($)')
plt.show()
product_sales = df.groupby('Product')['Quantity Ordered'].sum().sort_values(ascending=False).head(10).reset_index()
plt.figure(figsize=(12, 6))
sns.barplot(x='Product', y='Quantity Ordered', data=product_sales)
plt.title('Top 10 Selling Products by Quantity')
plt.xticks(rotation=45)
plt.ylabel('Quantity Ordered')
plt.show()
hourly_sales = df.groupby('Hour')['Sales'].sum().reset_index()
plt.figure(figsize=(12, 6))
sns.lineplot(x='Hour', y='Sales', data=hourly_sales, marker='o')
plt.title('Hourly Sales Pattern')
plt.ylabel('Total Sales ($)')
plt.xticks(range(0, 24))
plt.grid()
plt.show()

# Analysis 5: Product Price Distribution
plt.figure(figsize=(12, 6))
sns.boxplot(x='Product', y='Price Each', data=df[df['Product'].isin(product_sales['Product'].head(5))])
plt.title('Price Distribution of Top Products')
plt.xticks(rotation=45)
plt.ylabel('Price ($)')
plt.show()
day_sales = df.groupby('Day of Week')['Sales'].sum().reset_index()
day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
day_sales['Day of Week'] = pd.Categorical(day_sales['Day of Week'], categories=day_order, ordered=True)
day_sales = day_sales.sort_values('Day of Week')
plt.figure(figsize=(12, 6))
sns.barplot(x='Day of Week', y='Sales', data=day_sales)
plt.title('Sales by Day of Week')
plt.ylabel('Total Sales ($)')
plt.show()
pivot_table = df.pivot_table(index='Hour', columns='Day of Week', values='Sales', aggfunc='count')
plt.figure(figsize=(14, 8))
sns.heatmap(pivot_table, cmap='YlGnBu')
plt.title('Order Count by Hour and Day of Week')
plt.show()
product_combinations = df.groupby('Order ID')['Product'].apply(lambda x: ', '.join(x)).reset_index()
top_combinations = product_combinations['Product'].value_counts().head(10)
plt.figure(figsize=(12, 6))
top_combinations.plot(kind='bar')
plt.title('Top 10 Product Combinations')
plt.ylabel('Number of Orders')
plt.xticks(rotation=45)
plt.show()
daily_sales = df.groupby('Day')['Sales'].sum().reset_index()
plt.figure(figsize=(12, 6))
sns.lineplot(x='Day', y='Sales', data=daily_sales, marker='o')
plt.title('Daily Sales Trend')
plt.ylabel('Total Sales ($)')
plt.xticks(range(1, 32))
plt.grid()
plt.show()
weekend_sales = df.groupby('Weekend')['Sales'].sum().reset_index()
weekend_sales['Weekend'] = weekend_sales['Weekend'].map({0: 'Weekday', 1: 'Weekend'})
plt.figure(figsize=(8, 6))
sns.barplot(x='Weekend', y='Sales', data=weekend_sales)
plt.title('Weekend vs Weekday Sales')
plt.ylabel('Total Sales ($)')
plt.show()
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Price Each', y='Quantity Ordered', data=df)
plt.title('Price vs Quantity Ordered')
plt.show()
df.to_csv('Enhanced_Sales_Data.csv', index=False)
print("Analysis completed. Enhanced dataset saved as 'Enhanced_Sales_Data.csv'")
